<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="lms.mapper.LmsProductMapper" >
  <resultMap id="BaseResultMap" type="lms.model.LmsProduct" >
    <id column="id" property="id" jdbcType="DECIMAL" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="DECIMAL" />
    <result column="unit" property="unit" jdbcType="VARCHAR" />
    <result column="LMS_Second_Category_id" property="lmsSecondCategoryId" jdbcType="DECIMAL" />
    <result column="discount" property="discount" jdbcType="DECIMAL" />
    <result column="cost" property="cost" jdbcType="DECIMAL" />
    <result column="size" property="size" jdbcType="VARCHAR" />
    <result column="LMS_Supplier_id" property="lmsSupplierId" jdbcType="DECIMAL" />
    <result column="quality_period" property="qualityPeriod" jdbcType="VARCHAR" />
    <result column="if_back" property="ifBack" jdbcType="DECIMAL" />
    <result column="if_exchange" property="ifExchange" jdbcType="DECIMAL" />
    <result column="description" property="description" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    "id", "name", "price", "unit", "LMS_Second_Category_id", "discount", "cost", "size", "LMS_Supplier_id",
    "quality_period", "if_back", "if_exchange", "description"
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="lms.model.LmsProductExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from LMS_PRODUCT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from LMS_PRODUCT
    where "id" = #{id,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from LMS_PRODUCT
    where "id" = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="lms.model.LmsProductExample" >
    delete from LMS_PRODUCT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="lms.model.LmsProduct" >
    insert into LMS_PRODUCT (id, name, price, 
      unit, LMS_Second_Category_id, discount, 
      cost, size, LMS_Supplier_id, 
      quality_period, if_back, if_exchange, 
      description)
    values (#{id,jdbcType=DECIMAL}, #{name,jdbcType=VARCHAR}, #{price,jdbcType=DECIMAL}, 
      #{unit,jdbcType=VARCHAR}, #{lmsSecondCategoryId,jdbcType=DECIMAL}, #{discount,jdbcType=DECIMAL}, 
      #{cost,jdbcType=DECIMAL}, #{size,jdbcType=VARCHAR}, #{lmsSupplierId,jdbcType=DECIMAL}, 
      #{qualityPeriod,jdbcType=VARCHAR}, #{ifBack,jdbcType=DECIMAL}, #{ifExchange,jdbcType=DECIMAL}, 
      #{description,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="lms.model.LmsProduct" >
    insert into LMS_PRODUCT
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="unit != null" >
        unit,
      </if>
      <if test="lmsSecondCategoryId != null" >
        LMS_Second_Category_id,
      </if>
      <if test="discount != null" >
        discount,
      </if>
      <if test="cost != null" >
        cost,
      </if>
      <if test="size != null" >
        size,
      </if>
      <if test="lmsSupplierId != null" >
        LMS_Supplier_id,
      </if>
      <if test="qualityPeriod != null" >
        quality_period,
      </if>
      <if test="ifBack != null" >
        if_back,
      </if>
      <if test="ifExchange != null" >
        if_exchange,
      </if>
      <if test="description != null" >
        description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=DECIMAL},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="unit != null" >
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="lmsSecondCategoryId != null" >
        #{lmsSecondCategoryId,jdbcType=DECIMAL},
      </if>
      <if test="discount != null" >
        #{discount,jdbcType=DECIMAL},
      </if>
      <if test="cost != null" >
        #{cost,jdbcType=DECIMAL},
      </if>
      <if test="size != null" >
        #{size,jdbcType=VARCHAR},
      </if>
      <if test="lmsSupplierId != null" >
        #{lmsSupplierId,jdbcType=DECIMAL},
      </if>
      <if test="qualityPeriod != null" >
        #{qualityPeriod,jdbcType=VARCHAR},
      </if>
      <if test="ifBack != null" >
        #{ifBack,jdbcType=DECIMAL},
      </if>
      <if test="ifExchange != null" >
        #{ifExchange,jdbcType=DECIMAL},
      </if>
      <if test="description != null" >
        #{description,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="lms.model.LmsProductExample" resultType="java.lang.Integer" >
    select count(*) from LMS_PRODUCT
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update LMS_PRODUCT
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.unit != null" >
        unit = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.lmsSecondCategoryId != null" >
        LMS_Second_Category_id = #{record.lmsSecondCategoryId,jdbcType=DECIMAL},
      </if>
      <if test="record.discount != null" >
        discount = #{record.discount,jdbcType=DECIMAL},
      </if>
      <if test="record.cost != null" >
        cost = #{record.cost,jdbcType=DECIMAL},
      </if>
      <if test="record.size != null" >
        size = #{record.size,jdbcType=VARCHAR},
      </if>
      <if test="record.lmsSupplierId != null" >
        LMS_Supplier_id = #{record.lmsSupplierId,jdbcType=DECIMAL},
      </if>
      <if test="record.qualityPeriod != null" >
        quality_period = #{record.qualityPeriod,jdbcType=VARCHAR},
      </if>
      <if test="record.ifBack != null" >
        if_back = #{record.ifBack,jdbcType=DECIMAL},
      </if>
      <if test="record.ifExchange != null" >
        if_exchange = #{record.ifExchange,jdbcType=DECIMAL},
      </if>
      <if test="record.description != null" >
        description = #{record.description,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update LMS_PRODUCT
    set id = #{record.id,jdbcType=DECIMAL},
      name = #{record.name,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DECIMAL},
      unit = #{record.unit,jdbcType=VARCHAR},
      LMS_Second_Category_id = #{record.lmsSecondCategoryId,jdbcType=DECIMAL},
      discount = #{record.discount,jdbcType=DECIMAL},
      cost = #{record.cost,jdbcType=DECIMAL},
      size = #{record.size,jdbcType=VARCHAR},
      LMS_Supplier_id = #{record.lmsSupplierId,jdbcType=DECIMAL},
      quality_period = #{record.qualityPeriod,jdbcType=VARCHAR},
      if_back = #{record.ifBack,jdbcType=DECIMAL},
      if_exchange = #{record.ifExchange,jdbcType=DECIMAL},
      description = #{record.description,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="lms.model.LmsProduct" >
    update LMS_PRODUCT
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="unit != null" >
        unit = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="lmsSecondCategoryId != null" >
        LMS_Second_Category_id = #{lmsSecondCategoryId,jdbcType=DECIMAL},
      </if>
      <if test="discount != null" >
        discount = #{discount,jdbcType=DECIMAL},
      </if>
      <if test="cost != null" >
        cost = #{cost,jdbcType=DECIMAL},
      </if>
      <if test="size != null" >
        size = #{size,jdbcType=VARCHAR},
      </if>
      <if test="lmsSupplierId != null" >
        LMS_Supplier_id = #{lmsSupplierId,jdbcType=DECIMAL},
      </if>
      <if test="qualityPeriod != null" >
        quality_period = #{qualityPeriod,jdbcType=VARCHAR},
      </if>
      <if test="ifBack != null" >
        if_back = #{ifBack,jdbcType=DECIMAL},
      </if>
      <if test="ifExchange != null" >
        if_exchange = #{ifExchange,jdbcType=DECIMAL},
      </if>
      <if test="description != null" >
        description = #{description,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="lms.model.LmsProduct" >
    update LMS_PRODUCT
    set name = #{name,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      unit = #{unit,jdbcType=VARCHAR},
      LMS_Second_Category_id = #{lmsSecondCategoryId,jdbcType=DECIMAL},
      discount = #{discount,jdbcType=DECIMAL},
      cost = #{cost,jdbcType=DECIMAL},
      size = #{size,jdbcType=VARCHAR},
      LMS_Supplier_id = #{lmsSupplierId,jdbcType=DECIMAL},
      quality_period = #{qualityPeriod,jdbcType=VARCHAR},
      if_back = #{ifBack,jdbcType=DECIMAL},
      if_exchange = #{ifExchange,jdbcType=DECIMAL},
      description = #{description,jdbcType=VARCHAR}
    where id = #{id,jdbcType=DECIMAL}
  </update>


  <resultMap id="secondCategoryAndSupplierMap" type="lms.model.LmsProduct" extends="BaseResultMap" >
    <association property="lmsSecondCategory" javaType="lms.model.LmsSecondCategory">
      <id column="id" property="id" jdbcType="DECIMAL" />
      <result column="name" property="name" jdbcType="VARCHAR" />
      <result column="LMS_First_Category_id" property="lmsFirstCategoryId" jdbcType="DECIMAL" />
      <result column="description" property="description" jdbcType="VARCHAR" />
    </association>

    <collection property="supplierList" ofType="lms.model.LmsSupplier">
      <id column="id" property="id" jdbcType="DECIMAL" />
      <result column="name" property="name" jdbcType="VARCHAR" />
      <result column="address" property="address" jdbcType="VARCHAR" />
      <result column="contact_man" property="contactMan" jdbcType="VARCHAR" />
      <result column="phone" property="phone" jdbcType="DECIMAL" />
      <result column="bank" property="bank" jdbcType="VARCHAR" />
      <result column="bank_account" property="bankAccount" jdbcType="DECIMAL" />
      <result column="fax" property="fax" jdbcType="VARCHAR" />
      <result column="post_code" property="postCode" jdbcType="DECIMAL" />
      <result column="legal_man" property="legalMan" jdbcType="VARCHAR" />
      <result column="description" property="description" jdbcType="VARCHAR" />
    </collection>
  </resultMap>

  <!--一对多映射-->
  <select id="findSecondCategoryAndSupplierMap" resultMap="secondCategoryAndSupplierMap">
    select
    LMS_PRODUCT.*,LMS_SUPPLIER.*,LMS_SECOND_CATEGORY.*
    from LMS_PRODUCT, LMS_SUPPLIER, LMS_SECOND_CATEGORY
    where LMS_PRODUCT."LMS_Supplier_id" = LMS_SUPPLIER."id"
    and LMS_PRODUCT."LMS_Second_Category_id" = LMS_SECOND_CATEGORY."id"
  </select>

</mapper>